import{e as n,k as i,l as r,K as t,M as s,N as l,O as a,P as d,p as e}from"./vendor.469fd836.js";import{_ as c,a as h}from"./vuepress-core-process.c1d9211c.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const p={},_=d('<h1 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture" aria-hidden="true">#</a> Architecture</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p><img src="'+c+'" alt="vuepress-architecture-overview"></p><p>The above figure shows a brief overview of the VuePress architecture:</p><ul><li>Node App will generate temp files, including the layouts, pages, routes, etc.</li><li>Bundler will handle Client App together with the temp files, just like a common Vue SPA.</li></ul><p>As a developer, you must be aware of that VuePress has two main parts: <strong>Node App</strong> and <strong>Client App</strong>, which is important when developing plugins and themes:</p><ul><li>The entry file of a plugin or a theme will be loaded in Node App. So you need to use CommonJS format for them.</li><li>Client files will be loaded in Client App, which will be handled by bundler. For example, layouts, components, app setup files, app enhance files, etc. You&#39;d better use ESM format for them.</li></ul><h2 id="core-process-and-hooks" tabindex="-1"><a class="header-anchor" href="#core-process-and-hooks" aria-hidden="true">#</a> Core Process and Hooks</h2><p><img src="'+h+'" alt="vuepress-core-process"></p>',9),f=e("The above figure shows the core process of VuePress Node App and the hooks of "),m=e("Plugin API"),g=e(":"),w=e("In the "),b=t("strong",null,"init",-1),k=e(" stage: "),v=t("li",null,"Theme and plugins will be loaded. That means all the plugins should be used before initialization.",-1),x=e("As we are using markdown-it to parse the markdown file, so we need to create markdown-it instance before loading pages: "),A=e("extendsMarkdownOptions"),P=e(" hook will be processed to create markdown-it instance."),N=e("extendsMarkdown"),C=e(" hook will be processed extends markdown-it instance."),T=e("Page files will be loaded: "),V=e("extendsPageOptions"),y=e(" hook will be processed to create pages."),j=e("extendsPage"),B=e(" hook will be processed to extends page object."),S=t("li",null,[e("In the "),t("strong",null,"prepare"),e(" stage: "),t("ul",null,[t("li",null,"Temp files will be generated, so all hooks related to client files will be processed here.")])],-1),I=e("In the "),M=t("strong",null,"dev / build",-1),O=e(" stage: "),E=e("Bundler will be resolved. The "),F=e("alias"),L=e(" and "),R=e("define"),z=e(" hooks depend on bundler configuration, so they will be processed here.");function H(J,K){const o=n("RouterLink");return i(),r(a,null,[_,t("p",null,[f,s(o,{to:"/reference/plugin-api.html"},{default:l(()=>[m]),_:1}),g]),t("ul",null,[t("li",null,[w,b,k,t("ul",null,[v,t("li",null,[x,t("ul",null,[t("li",null,[s(o,{to:"/reference/plugin-api.html#extendsmarkdownoptions"},{default:l(()=>[A]),_:1}),P]),t("li",null,[s(o,{to:"/reference/plugin-api.html#extendsmarkdown"},{default:l(()=>[N]),_:1}),C])])]),t("li",null,[T,t("ul",null,[t("li",null,[s(o,{to:"/reference/plugin-api.html#extendspageoptions"},{default:l(()=>[V]),_:1}),y]),t("li",null,[s(o,{to:"/reference/plugin-api.html#extendspage"},{default:l(()=>[j]),_:1}),B])])])])]),S,t("li",null,[I,M,O,t("ul",null,[t("li",null,[E,s(o,{to:"/reference/plugin-api.html#alias"},{default:l(()=>[F]),_:1}),L,s(o,{to:"/reference/plugin-api.html#define"},{default:l(()=>[R]),_:1}),z])])])])],64)}var G=u(p,[["render",H]]);export{G as default};
